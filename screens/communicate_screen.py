# screens/communicate_screen.py
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from screens.base import BaseScreen
from states.communicate import Communicate
from keyboards.presets import communicate_kb


class CommunicateScreen(BaseScreen):
    """
    –ü—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    –°—Ç–∞–≤–∏—Ç FSM –≤ Communicate.waiting_news.
    """
    async def _pre_render(
        self,
        message: types.Message,
        actor: types.User | None = None,
        state: FSMContext | None = None,
        error_text: str | None = None,
        **kwargs
    ):
        user = actor or message.from_user
        logging.info("CommunicateScreen for tg_id=%s", user.id)

        if state:
            await state.set_state(Communicate.waiting_news)

        ctx = {
            "title": "üóûÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å",
            "lines": [
                "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
                "–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞—Å—Ç –¥–µ–π—Å—Ç–≤–∏–µ ¬´communicate¬ª (–±–µ–∑ —Ä–∞–π–æ–Ω–∞).",
                "–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –ø–æ–ª–µ action.text –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ–ø–∞–¥—ë—Ç–µ –≤ —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—è–≤–∫–∏.",
            ],
            "hint": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ—Å—Ç—å (–æ—Ç 1 –¥–æ 600 —Å–∏–º–≤–æ–ª–æ–≤):",
            "error_text": error_text,   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        }

        return {
            "communicate": ctx,
            "keyboard": communicate_kb()
        }
