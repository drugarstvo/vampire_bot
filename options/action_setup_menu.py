# options/action_setup.py
import logging

from aiogram import types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from .registry import option
from db.session import get_session
from db.models import Action, ActionType, User, ActionStatus
from screens.settings_action import SettingsActionScreen


async def _rerender(cb: types.CallbackQuery, state: FSMContext, action_id: int):
    # –ø—É—Å—Ç—å —ç–∫—Ä–∞–Ω —Å–∞–º –¥–æ—Å—Ç–∞–Ω–µ—Ç action –ø–æ id, —á—Ç–æ–±—ã –Ω–µ —Ç–∞—Å–∫–∞—Ç—å ¬´–∂–∏–≤–æ–π¬ª ORM-–æ–±—ä–µ–∫—Ç –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
    await SettingsActionScreen().run(
        message=cb.message, actor=cb.from_user, state=state,
        action_id=action_id
    )


@option("action_setup_menu_collective")
async def action_setup_menu_collective(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    async with get_session() as session:
        user = (await session.execute(select(User).where(User.tg_id == cb.from_user.id))).scalars().first()
        action = (await session.execute(select(Action).where(Action.id == action_id))).scalars().first()

        if not user or not action:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
            return

        if action.type == ActionType.COLLECTIVE:
            await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è.")
            return

        action.type = ActionType.COLLECTIVE
        await session.commit()

    await _rerender(cb, state, action_id)
    await cb.answer("–¢–∏–ø –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π ‚úÖ")


@option("action_setup_menu_individual")
async def action_setup_menu_individual(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    async with get_session() as session:
        user = (await session.execute(select(User).where(User.tg_id == cb.from_user.id))).scalars().first()
        action = (await session.execute(select(Action).where(Action.id == action_id))).scalars().first()

        if not user or not action:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
            return

        if action.type == ActionType.INDIVIDUAL:
            await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è.")
            return

        action.type = ActionType.INDIVIDUAL
        await session.commit()

    await _rerender(cb, state, action_id)
    await cb.answer("–¢–∏–ø –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π ‚úÖ")


_RESOURCE_FIELDS = {"force", "money", "influence", "information"}
_STEP = 1


async def _bump_resource(cb: types.CallbackQuery, state: FSMContext, action_id: int, field: str, delta: int):
    if field not in _RESOURCE_FIELDS:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å.", show_alert=True)
        return

    async with get_session() as session:
        user = (await session.execute(select(User).where(User.tg_id == cb.from_user.id))).scalars().first()
        action = (await session.execute(select(Action).where(Action.id == action_id))).scalars().first()
        if not user or not action:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.", show_alert=True)
            return

        current = getattr(action, field, 0) or 0
        cap = getattr(user, field, 0) or 0

        new_val = current + delta
        if new_val < 0:
            new_val = 0
        if new_val > cap:
            new_val = cap

        if new_val == current:
            if delta > 0 and current >= cap:
                await cb.answer("–ë–æ–ª—å—à–µ –≤–ª–æ–∂–∏—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.")
            elif delta < 0 and current <= 0:
                await cb.answer("–ò —Ç–∞–∫ —É–∂–µ 0.")
            else:
                await cb.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            return

        setattr(action, field, new_val)
        await session.commit()

    await _rerender(cb, state, action_id)
    sign = "‚ûï" if delta > 0 else "‚ûñ"
    await cb.answer(f"{sign} {field}: {current} ‚Üí {new_val}")


@option("action_setup_menu_money_add")
async def action_setup_menu_money_add(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "money", +_STEP)


@option("action_setup_menu_money_remove")
async def action_setup_menu_money_remove(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "money", -_STEP)


@option("action_setup_menu_influence_add")
async def action_setup_menu_influence_add(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "influence", +_STEP)


@option("action_setup_menu_influence_remove")
async def action_setup_menu_influence_remove(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "influence", -_STEP)


@option("action_setup_menu_information_add")
async def action_setup_menu_information_add(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "information", +_STEP)


@option("action_setup_menu_information_remove")
async def action_setup_menu_information_remove(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "information", -_STEP)


@option("action_setup_menu_force_add")
async def action_setup_menu_force_add(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "force", +_STEP)


@option("action_setup_menu_force_remove")
async def action_setup_menu_force_remove(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    await _bump_resource(cb, state, action_id, "force", -_STEP)


@option("action_setup_menu_back")
async def action_setup_menu_back(cb: types.CallbackQuery, state: FSMContext, **_):
    from screens.actions import ActionsScreen
    await ActionsScreen().run(message=cb.message, actor=cb.from_user, state=state)
    await cb.answer()


@option("action_setup_menu_done")
async def action_setup_menu_done(cb: types.CallbackQuery, state, action_id: int, **_):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏:
    - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (–ø—Ä–∏–Ω–∏–º–∞–µ–º PENDING –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫)
    - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤ (money/influence/information/force)
    - –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏ —Å–ª–æ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å PENDING
    """
    try:
        async with get_session() as session:
            # 1) –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = await User.get_by_tg_id(session, cb.from_user.id)
            if not user:
                await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            # 2) –ó–∞—è–≤–∫–∞
            action = (await session.execute(
                select(Action)
                .options(selectinload(Action.owner))
                .where(Action.id == action_id)
            )).scalars().first()

            if not action:
                await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            if action.owner_id != user.id:
                await cb.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.", show_alert=True)
                return

            # 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            # –í –º–æ–¥–µ–ª–∏ –Ω–µ—Ç DRAFT, —Å—á–∏—Ç–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ç–æ–ª—å–∫–æ PENDING –∫–∞–∫ ‚Äú—á–µ—Ä–Ω–æ–≤–∏–∫/–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏‚Äù.
            if action.status not in (ActionStatus.PENDING, ActionStatus.DRAFT):
                await cb.answer(f"–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ: {action.status.value}.", show_alert=True)
                return

            # 4) –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–ª–∏ on_point
            total_resources = (action.money or 0) + (action.influence or 0) + (action.information or 0) + (
                    action.force or 0)
            if total_resources <= 0 and not getattr(action, "on_point", False):
                await cb.answer("–ó–∞—è–≤–∫–∞ –ø—É—Å—Ç–∞: –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ —Ñ–ª–∞–≥ '–ï–¥–µ–º –Ω–∞ —Ç–æ—á–∫—É'.", show_alert=True)
                return

            # 4) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
            if (user.available_actions or 0) <= 0:
                await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π.", show_alert=True)
                return

            # 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            need_money = action.money or 0
            need_infl = action.influence or 0
            need_info = action.information or 0
            need_force = action.force or 0

            lack = []
            if user.money < need_money:
                lack.append(f"üí∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need_money - user.money}")
            if user.influence < need_infl:
                lack.append(f"ü™ô –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need_infl - user.influence}")
            if user.information < need_info:
                lack.append(f"üß† –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need_info - user.information}")
            if user.force < need_force:
                lack.append(f"üí™ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need_force - user.force}")

            if lack:
                await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: " + ", ".join(lack), show_alert=True)
                return

            # 6) –°–ø–∏—Å–∞–Ω–∏–µ (—Ä–µ—Å—É—Ä—Å—ã + —Å–ª–æ—Ç)
            user.money -= need_money
            user.influence -= need_infl
            user.information -= need_info
            user.force -= need_force
            user.available_actions = max(0, (user.available_actions or 0) - 1)

            # –°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–≤–ª—è–µ–º PENDING ‚Äî ‚Äú–ø—Ä–∏–Ω—è—Ç–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞‚Äù
            action.status = ActionStatus.PENDING

            await session.commit()

        await cb.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞.", show_alert=False)

        # –ü–µ—Ä–µ—Ä–∏—Å—É–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ ORM-–æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å lazy-load)
        await SettingsActionScreen().run(
            message=cb.message,
            actor=cb.from_user,
            state=state,
            action_id=action_id
        )

    except Exception as e:
        logging.exception("action_setup_menu_done failed")
        await cb.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


def _cap_actions(user: User, inc: int = 1) -> None:
    """–í–µ—Ä–Ω—ë—Ç +inc —Å–ª–æ—Ç–æ–≤, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è max_available_actions (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)."""
    cur = (user.available_actions or 0) + inc
    mx = user.max_available_actions
    if mx is not None:
        cur = min(cur, mx)
    user.available_actions = max(0, cur)


@option("action_setup_menu_edit")
async def action_setup_menu_edit(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    """
    –ü–µ—Ä–µ–≤–æ–¥ –≤ DRAFT. –ï—Å–ª–∏ –±—ã–ª PENDING, –≤–µ—Ä–Ω—É—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫—É –∏ —Å–ª–æ—Ç –¥–µ–π—Å—Ç–≤–∏—è.
    –†–µ—Å—É—Ä—Å—ã –≤ –∑–∞—è–≤–∫–µ –ù–ï –æ–±–Ω—É–ª—è–µ–º.
    """
    try:
        async with get_session() as session:
            user = await User.get_by_tg_id(session, cb.from_user.id)
            if not user:
                await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            action = (await session.execute(
                select(Action)
                .options(selectinload(Action.owner))
                .where(Action.id == action_id)
            )).scalars().first()

            if not action:
                await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            if action.owner_id != user.id:
                await cb.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.", show_alert=True)
                return
            if action.status == ActionStatus.DELETED:
                await cb.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
                return
            if action.status == ActionStatus.DRAFT:
                await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (DRAFT).", show_alert=False)
            else:
                # –ë—ã–ª PENDING (–∏–ª–∏ –∏–Ω–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å) ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫—É –∏ —Å–ª–æ—Ç
                if action.status == ActionStatus.PENDING:
                    user.money += (action.money or 0)
                    user.influence += (action.influence or 0)
                    user.information += (action.information or 0)
                    user.force += (action.force or 0)
                    _cap_actions(user, +1)

                # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ DRAFT. –†–µ—Å—É—Ä—Å—ã –≤ –∑–∞—è–≤–∫–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
                action.status = ActionStatus.DRAFT
                await session.commit()
                await cb.answer("–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ DRAFT. –†–µ—Å—É—Ä—Å—ã –∏ —Å–ª–æ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", show_alert=False)

        await SettingsActionScreen().run(
            message=cb.message,
            actor=cb.from_user,
            state=state,
            action_id=action_id
        )

    except Exception as e:
        logging.exception("action_setup_menu_edit failed")
        await cb.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@option("action_setup_menu_delete")
async def action_setup_menu_delete(cb: types.CallbackQuery, state: FSMContext, action_id: int, **_):
    """
    –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞—è–≤–∫—É –∫–∞–∫ DELETED.
    –ï—Å–ª–∏ –±—ã–ª PENDING ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä–æ–∫—É –∏ —Å–ª–æ—Ç –¥–µ–π—Å—Ç–≤–∏—è.
    –†–µ—Å—É—Ä—Å—ã –≤ —Å–∞–º–æ–π –∑–∞—è–≤–∫–µ –ù–ï –æ–±–Ω—É–ª—è—é—Ç—Å—è.
    """
    try:
        async with get_session() as session:
            user = await User.get_by_tg_id(session, cb.from_user.id)
            if not user:
                await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            action = (await session.execute(
                select(Action)
                .options(selectinload(Action.owner))
                .where(Action.id == action_id)
            )).scalars().first()

            if not action:
                await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            if action.owner_id != user.id:
                await cb.answer("–≠—Ç–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.", show_alert=True)
                return
            if action.status == ActionStatus.DELETED:
                await cb.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)
            else:
                # –ï—Å–ª–∏ –±—ã–ª–∞ PENDING ‚Äî —Ä–µ—Ñ–∞–Ω–¥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–ª–æ—Ç–∞
                if action.status == ActionStatus.PENDING:
                    user.money += (action.money or 0)
                    user.influence += (action.influence or 0)
                    user.information += (action.information or 0)
                    user.force += (action.force or 0)
                    _cap_actions(user, +1)

                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ DELETED (—Ä–µ—Å—É—Ä—Å—ã –≤ –∑–∞—è–≤–∫–µ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
                action.status = ActionStatus.DELETED
                await session.commit()
                await cb.answer("–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –†–µ—Å—É—Ä—Å—ã –∏ —Å–ª–æ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã (–µ—Å–ª–∏ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã).", show_alert=False)

        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω.
        await SettingsActionScreen().run(
            message=cb.message,
            actor=cb.from_user,
            state=state,
            action_id=action_id
        )

    except Exception as e:
        logging.exception("action_setup_menu_delete failed")
        await cb.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
